% Command Line Interface (CLI) is well-suited for automatization 
% purposes and Octave. 
%
% Please execute this m-file section by section to get familiar with batch
% processing for *-modelName-* on CLI.
%
% This m-file has been automatically generated. 
%
% Written by: Agah Karakuzu, 2017
% =========================================================================

%% I- DESCRIPTION

qMRinfo('*-modelName-*'); % Display help 
cd ('*-demoDir-*'); % Directory that contains demo files.


%% II- CREATE MODEL OBJECT 

Model = *-modelName-*; % Create model object

% -------------------------------------------------------------------------
%%       A- MODIFY OPTIONS
%           |- This section will pop-up the options GUI. Close window to continue.
%           |- Octave is not GUI compatible. Modify Model.options directly.
% -------------------------------------------------------------------------

Model = Custom_OptionsGUI(Model);

% -------------------------------------------------------------------------
%%      B- LOAD PROTOCOL
%  (3)	|- Respective command lines appear if required by *-modelName-*. 
% -------------------------------------------------------------------------

*-protExplain-*
*-protCommand-*



%% III- FIT EXPERIMENTAL DATASET
% -------------------------------------------------------------------------
%%       A- LOAD EXPERIMENTAL DATA 
%           |- Respective command lines appear if required by *-modelName-*. 
% -------------------------------------------------------------------------
*-dataExplain-*

data = struct();
*-dataCommand-*


% -------------------------------------------------------------------------
%%       B- CHECK FITTING RESULT IN A VOXEL
%           (6)	|- To observe outputs, please execute this section.
% -------------------------------------------------------------------------

% Read output  ---> 

 outputIm = FitResults.(FitResults.fields{1});
 row = round(size(outputIm,1)/2);
 col = round(size(outputIm,2)/2);
 voxel           = [row, col, 1]; % Please adapt 3rd index if 3D. 


% Show plot  ---> 
% Warning: This part may not be available for all models.

  figure();
 dataVox         = extractvoxel(data,voxel);
 FitResultsVox = Model.fit(dataVox);
 Model.plotModel(FitResultsVox,dataVox)



% -------------------------------------------------------------------------
%%      C- FIT DATASET 
%             |- This section will fit data. 
% -------------------------------------------------------------------------

FitResults = FitData(data,Model,0);

FitResults.Model = Model; % qMRLab output.




%       D- SHOW MAP
 figure();
 imagesc(outputIm); colorbar(); title(FitResults.fields{1});

% -------------------------------------------------------------------------
%%      D- SAVE MAPS AND OBJECT
%%            |- Save your outputs. 
% -------------------------------------------------------------------------

    FitResultSave_nii
	qMRsaveModel(Model,'*-modelName-*.qMRLab.mat'); 


% You can save outputs in Nifti format using FitResultSave_nii function:
% Plase see qMRinfo('FitResultsSave_nii')

%% IV- SIMULATIONS
% -------------------------------------------------------------------------
%%       A- Single Voxel Curve 
%           |- Simulates Single Voxel curves:
%                (1) use equation to generate synthetic MRI data
%                (2) add rician noise
%                (3) fit and plot curve
% -------------------------------------------------------------------------


'*-Single Voxel Curve-*'

% -------------------------------------------------------------------------
%%       B- Sensitivity Analysis 
%           |-    Simulates sensitivity to fitted parameters:
%                  (1) vary fitting parameters from lower (lb) to upper (ub) bound in 10 steps
%                  (2) run Sim_Single_Voxel_Curve Nofruns times
%                  (3) Compute mean and std across runs
% -------------------------------------------------------------------------


'*-Sensitivity Analysis-*'

